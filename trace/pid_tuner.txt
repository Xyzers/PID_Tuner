[General]
; Nom de base pour le fichier de log. Si vide, utilise le nom du script (pid_tuner).
log_file_base_name = ./trace/pid_tuner_log
; Niveaux de log possibles : DEBUG, INFO, WARNING, ERROR, CRITICAL
log_level = INFO

[ModeleProcede]
; Chemins vers le modèle de procédé entraîné et les scalers (issus de pid_model_builder.py)
model_path = C:\Users\EDVA10053293\OneDrive - Groupe Avril\08 - Marchine Learning\Jupyter\Regulation PID\Pid_Model\trained_LIC4401.joblib
scalers_path = C:\Users\EDVA10053293\OneDrive - Groupe Avril\08 - Marchine Learning\Jupyter\Regulation PID\Pid_Model\scalers_LIC4401.joblib

; Configuration des features utilisées par le modèle (doit correspondre à pid_model_builder.ini [ModelFeatures])
; Requis pour savoir combien de valeurs passées (lags) préparer pour chaque variable.
; L'idéal est de lire directement scaler_X.feature_names_in_ si disponible.
; Ces valeurs servent de fallback ou de vérification.
pv_lags = 10
mv_lags = 10
sp_lags = 10
kp_hist_lags = 0 ; Exemple: si les valeurs Kp historiques étaient des features
ti_hist_lags = 0 ; Exemple: si les valeurs Ti historiques étaient des features
td_hist_lags = 0 ; Exemple: si les valeurs Td historiques étaient des features
# disturbance_1_lags = 0 ; Exemple: si disturbance_tag_1 était utilisé comme feature

[ParametresPIDBase]
; Paramètres PID de base, certains seront surchargés par les jeux de test.
tsamp_pid_sim_ms = 100 ; Temps d'échantillonnage en millisecondes (DOIT correspondre à la résolution des données du modèle)
mv_min = 0.0           ; Limite inférieure de la MV
mv_max = 100.0          ; Limite supérieure de la MV
direct_action = true   ; true si une erreur positive (SP > PV) doit augmenter la MV
; initial_integral = 0.0 ; Peut être défini pour des conditions initiales spécifiques (non utilisé actuellement)

[ScenarioSimulation]
simulation_duration_seconds = 412 ; Durée de chaque exécution de simulation
initial_pv = 100.0                 ; Valeur initiale de la Variable de Procédé (PV)
initial_mv = 0.0                 ; Valeur initiale de la Variable Manipulée (MV) (pour initialisation PID sans à-coup)

; Type de scénario pour la consigne (SP): constant, step (échelon)
setpoint_type = constant
; Pour setpoint_type = constant
sp_constant_value = 90.0
; Pour setpoint_type = step (exemple: échelon de 70 à 80 à 10s, puis à 75 à 150s)
; Format: temps_en_secondes, valeur_sp; temps_en_secondes, valeur_sp
sp_steps = 60, 81.0; 60, 82; 82, 83

disturbance1_type = step ; ou constant, ou historical_trace_for_disturbance
disturbance1_constant_value = 0.0 ; si constant
disturbance1_steps = 24.0, 0.0; 378.0, 1.0 ; 10.0, 0.0

; Comment initialiser les valeurs passées (lags) pour le modèle: constant
lags_initialization_mode = constant

[JeuxDeReglagePID]
; Définir les jeux de Kp, Ti, Td à tester.
; Format pour chaque jeu: Kp, Ti, Td, nom_du_jeu (optionnel, pour identification)
; Ti = 0 ou inf signifie pas d'action intégrale. Td = 0 signifie pas d'action dérivée.
set1 = 1.0, 18,6, 4.5, PID_Reference
# set2 = 3.0, 120, 0, PID_Test_Kp_Haut
# set3 = 1.5, 80, 1, PID_Test_avec_Td
; Ajoutez d'autres jeux de paramètres ici si besoin:
; set4 = ...

[Sortie]
results_plot_path = ./trace/pid_tuner_comparaison_plot.png  ; Chemin pour le graphique comparatif global
results_metrics_csv = ./trace/pid_tuner_metriques.csv       ; Chemin pour le CSV des métriques
; Mettre à true pour générer un graphique pour chaque simulation individuelle (peut créer beaucoup de fichiers)
plot_individual_runs = true
individual_runs_plot_dir = ./trace/runs_individuels/      ; Répertoire pour les graphiques individuels